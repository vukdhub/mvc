{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <h1>Kmom Redovisning</h1>
    
    <div id="kmom01" {% if app.request.query.get('kmom') == 'kmom01' %} style="scroll-margin-top: 50px;" {% endif %}>
        <h2>Kmom01</h2>
        <p>My experience with an object-oriented language is related to a python course, where I had to work with classes.</p>
        <p>Basic things for creating classes are: Class serve as templates for creating objects with common properties and methods. Properties and Methods define the behavior of the class. Constructors are special methods used to initialize new objects upon creation. Basic understanding of concepts of inheritance and polymorphism, where a class can inherit properties and methods from another class and exhibit different behaviors. Knowing how to use encapsulation to restrict access to a class's members and protect its internal state.</p>
        <p>My code consists of Symphony framework for PHP. Then twig template engine. The base of the website is under templetes, where with the help of twig, html is created and it is easier to manipulate by linking pages. Then, the dynamic part of the page is placed in src/Controller, there is part of the Lucky Number code, as well as where routes are placed and created. I use app.css for styling my page.</p>
        <p>Regarding php the right way, i didnt have a time to read it all, i just took a glance, and there is a part about templating which is interesting for me, because i want to make my work easier, i see huge adventage working with frameworks and templates. The part about databases and servers seem interesting for reading as well.</p>
        <p>TIL: I can say working with Symphony and making a ground for a webpage where in the future it would be easier working with big systems.</p>
    </div>
    
    <div id="kmom02" {% if app.request.query.get('kmom') == 'kmom02' %} style="scroll-margin-top: 50px;" {% endif %}>
        <h2>Kmom02</h2>
        <p>In object oriented php the inheritance allows a class to inherit properties and methods from another class, for example child class inherits from a parent class and in that way child class builds upon the parent class functionality. Composition is something similar to inheritance only that now a class contains an instance of another class as one of its members. This way the class can use the functionality of the other class.
            An interface is a construction that defines which methods a class must implement, meaning how a class behaves without providing the implementation. A trait is a group of methods that can be reused in multiple classes.</p>
        <p>Doing the assignment, creating a card game I initially used some code from the dice exercise and adapted it to develop the classes Card, DeckOfCards and CardHand. I'm satisfied with how I implemented that, also for JSON part of the assignment. I tried to implement one inheritance, that was CardGraphic, same way as we had DiceGraphic. Reflection on my work, there is a room for doing much better of course, but I felt that the kmom02 was already bit too big of an assignment so I tried to do my best without overcomplicating things and keeping a simple approach as to understand better and keep the code clean and readable.
            My reflections thus far on working with Symfony and organizing the code after MVC pattern are that I find that concept very easy to follow, the modular framework with routing is working quite good. But I feel there is much more to this that can be useful so letâ€™s see more from this working in next kmoms.</p>
        <p>TIL kmom02
            I learned more about inheritance and composition and I get to make a game with symphony and mvc which was very interesting. </p>
    </div>
    
{% endblock %}
